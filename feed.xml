<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zack McCauley</title>
    <description>Hi, I‚Äôm a macadmin for a school district in Montana. I like to program things sometimes. I am always learning.
</description>
    <link>https://wardsparadox.github.io/</link>
    <atom:link href="https://wardsparadox.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 20 Sep 2018 10:21:22 -0600</pubDate>
    <lastBuildDate>Thu, 20 Sep 2018 10:21:22 -0600</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Force a DEP sync..from your phone!</title>
        <description>&lt;p&gt;I‚Äôve used Workflow in the past, but I hadn‚Äôt really fully explored it as ‚Äúclick this‚Äù instead of ‚Äúlaunch this app and run this real quick‚Äù never bothered me. Things have changed since then. Hello to Siri Shortcuts in iOS 12! I can now run things by voice. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;In my &lt;code class=&quot;highlighter-rouge&quot;&gt;$org&lt;/code&gt;, we use &lt;a href=&quot;https://micromdm.io&quot; title=&quot;micromdm&quot;&gt;MicroMDM&lt;/a&gt; to manage our Mac computers. The benefits to this are that it‚Äôs API is fully exposed and that makes things SUPER easy to integrate with. Some members in the &lt;a href=&quot;macadmins.org&quot; title=&quot;macadmins slack link&quot;&gt;MacAdmins Slack&lt;/a&gt; had pointed out that there existed an API endpoint to force a DEP sync. This is HUGE! As we are still getting a large number of our devices into DEP, having to wait a while for ¬µmdm to sync was a bit tedious. This was more of a patience issue on my part than a ¬µmdm quirk.  I quickly wrote this up in &lt;a href=&quot;https://www.getpostman.com/&quot; title=&quot;postman&quot;&gt;Postman&lt;/a&gt; and had a nice interface to run it. I am working on getting some shell alias‚Äô setup for this as well.&lt;/p&gt;

&lt;p&gt;I‚Äôve been running iOS 12 since dev beta 1 on my daily driver. It has come a long way, but enjoyable and pleasantly less buggy all the way through to release day. I run it on my daily driver so that I can fully experience any bugs and do more feedback that way. If you find an issue on your daily, it‚Äôs rather easy to remember to file feedback (üòú)! With Siri Shortcuts + the Shortcuts app now fully available, I started playing around. That‚Äôs when I noticed this:
&lt;img src=&quot;/images/2018/09/getcontentsofurl.jpeg&quot; alt=&quot;get contents of url&quot; width=&quot;350px&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ü§î Interesting. I can specify some headers and everything. Let‚Äôs give it a shot.&lt;/p&gt;

&lt;p&gt;¬µmdm uses basic auth to authenticate the API calls. This can be sent as a Base64 Encoded string as a header via
&lt;code class=&quot;highlighter-rouge&quot;&gt;Authorization: Basic BASE64USERPASSSTRING&lt;/code&gt;. In &lt;code class=&quot;highlighter-rouge&quot;&gt;cURL&lt;/code&gt; this looks like&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -X POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  https://micromdm.url/v1/dep/syncnow &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -H &lt;span class=&quot;s1&quot;&gt;'Authorization: Basic U25lYWt5IFNuZWFreSwgTmljZSB0cnkgO1AK'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I was able to convert this curl code to the content needed in the Shortcut. To do this, I tried inspecting the file on my computer. It turns out, &lt;code class=&quot;highlighter-rouge&quot;&gt;.shortcut&lt;/code&gt; files are just binary &lt;code class=&quot;highlighter-rouge&quot;&gt;plists&lt;/code&gt; which remind me of Automator workflows. The file is shared below, but there are some things you will need to adjust for this to work right in your environment. All you should need to swap is Lines &lt;code class=&quot;highlighter-rouge&quot;&gt;15&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;82&lt;/code&gt; (unless you are using more potent forms of authentication). You can also set a vocal command for Siri to run this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/2018/09/microMDM - Force DEP Sync.shortcut&quot;&gt;microMDM - Force DEP Sync.shortcut&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 20 Sep 2018 10:01:00 -0600</pubDate>
        <link>https://wardsparadox.github.io/2018/09/20/force-a-dep-sync-from-your-phone/</link>
        <guid isPermaLink="true">https://wardsparadox.github.io/2018/09/20/force-a-dep-sync-from-your-phone/</guid>
        
        <category>ios</category>
        
        <category>micromdm</category>
        
        <category>siri shortcuts</category>
        
        
      </item>
    
      <item>
        <title>Modifying Safari's Auto-Play Preferences</title>
        <description>&lt;p&gt;I saw an interesting question today on the MacAdmins Slack regarding setting the Auto-Play preferences introduced in 10.13‚Äôs Safari.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/04/screencap.png&quot; alt=&quot;slack screencap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Curiosity took hold.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;After a quick look through I saw this sqlite3 database:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/Library/Safari/PerSitePreferences.db
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I noticed that after every modification to the domain based Auto-Play preference, this file would change. Opening it up in &lt;a href=&quot;http://sqlitebrowser.org/&quot;&gt;sqlite browser&lt;/a&gt;, I saw some positive results from my curiosity.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/04/tables.png&quot; alt=&quot;tables.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I played around with some settings and took note of what the values translated to in this database.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Column Name&lt;/th&gt;
      &lt;th&gt;Column Value Type&lt;/th&gt;
      &lt;th&gt;Possible Values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;domain&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;TEXT&lt;/td&gt;
      &lt;td&gt;url of site to be configured&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;preference&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;TEXT&lt;/td&gt;
      &lt;td&gt;So far, only &lt;code class=&quot;highlighter-rouge&quot;&gt;PerSitePreferencesAutoplay&lt;/code&gt;. Possible for more values later&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;preference_value&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;NUMBER&lt;/td&gt;
      &lt;td&gt;0 = ‚ÄúAllow All Auto-Play‚Äù , 1 = ‚ÄúStop Media with Sound‚Äù, 2 = ‚ÄúNever Auto-play‚Äù.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;After digging some more, I found one could write to this DB and have the changes as long as Safari was not open. Here is the script I used to test it.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;loggedInUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;/usr/bin/python -c &lt;span class=&quot;s1&quot;&gt;'from SystemConfiguration import SCDynamicStoreCopyConsoleUser; import sys; username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]; username = [username,&quot;&quot;][username in [u&quot;loginwindow&quot;, None, u&quot;&quot;]]; sys.stdout.write(username + &quot;\n&quot;);'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;urlToModify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;munki.bsd7.org&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Value to Set&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  0 = &quot;Allow All Auto-Play&quot; , 1 = &quot;Stop Media with Sound&quot;, 2 = &quot;Never Auto-play&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;valueToSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;/usr/bin/sqlite3 &lt;span class=&quot;s2&quot;&gt;&quot;/Users/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$loggedInUser&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/Library/Safari/PerSitePreferences.db&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SELECT EXISTS(SELECT preference_value FROM preference_values WHERE domain='&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$urlToModify&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;');&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$current&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  /usr/bin/sqlite3 &lt;span class=&quot;s2&quot;&gt;&quot;/Users/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$loggedInUser&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/Library/Safari/PerSitePreferences.db&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;INSERT INTO preference_values (domain, preference, preference_value) VALUES ('&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$urlToModify&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;', 'PerSitePreferencesAutoplay', &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$valueToSet&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;);&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Domain not found in db, setting&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  /usr/bin/sqlite3 &lt;span class=&quot;s2&quot;&gt;&quot;/Users/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$loggedInUser&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/Library/Safari/PerSitePreferences.db&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Update preference_values SET preference_value=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$valueToSet&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; WHERE domain='&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$urlToModify&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;';&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Value Updated to Match&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hopefully this helps anyone who needs this and hopefully this gets turned into a configuration profile setting.
&lt;em&gt;psst file your radars for this! My radar for this is: 39192330&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Apr 2018 16:03:46 -0600</pubDate>
        <link>https://wardsparadox.github.io/2018/04/04/modifying-safaris-autoplay-preferences/</link>
        <guid isPermaLink="true">https://wardsparadox.github.io/2018/04/04/modifying-safaris-autoplay-preferences/</guid>
        
        <category>macos</category>
        
        <category>safari</category>
        
        <category>sqlite</category>
        
        
      </item>
    
      <item>
        <title>Setting up MunkiReport-PHP on Ubuntu 16 with Nginx</title>
        <description>&lt;p&gt;This post is still really rough, but should be fully functional.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Follow this guide to get PHP running:
&lt;a href=&quot;https://www.rosehosting.com/blog/install-php-7-1-with-nginx-on-an-ubuntu-16-04-vps/&quot; title=&quot;Install PHP 7.1 with Nginx on Ubuntu 16.04 by RoseHosting&quot;&gt;Install PHP 7.1 with Nginx on Ubuntu 16.04&lt;/a&gt;
Follow this guide to get MySQL running:
&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-16-04&quot; title=&quot;How To Install MySQL on Ubuntu 16.04&quot;&gt;How To Install MySQL on Ubuntu 16.04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For MRPHP to run, you will need to install the following:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install php7.1-common php7.1-opcache php7.1-json php7.1-mcrypt php7.1-zip php7.1-xml php7.1-soap php7.1-readline php7.1-cli php7.1-fpm php7.1-mbstring php7.1-mysql php7.1-cgi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Make sure &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; is also installed.&lt;/p&gt;

&lt;p&gt;Create a new group that you can add &lt;code class=&quot;highlighter-rouge&quot;&gt;www-data&lt;/code&gt; to, as well as your service accounts.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /media/
git clone https://github.com/munkireport/munkireport-php munkireport
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ./munkireport
&lt;span class=&quot;c&quot;&gt;# Install composer&lt;/span&gt;
php -r &lt;span class=&quot;s2&quot;&gt;&quot;copy('https://getcomposer.org/installer', 'composer-setup.php');&quot;&lt;/span&gt;
php -r &lt;span class=&quot;s2&quot;&gt;&quot;if (hash_file('SHA384', 'composer-setup.php') === '544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;&quot;&lt;/span&gt;
php composer-setup.php
php -r &lt;span class=&quot;s2&quot;&gt;&quot;unlink('composer-setup.php');&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Run composer tools&lt;/span&gt;
php composer.phar install --no-dev --no-suggest --optimize-autoloader
chown -R &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;:groupthatcontainsuserandwww-data ../munkireport
chmod -R 755 ../munkireport
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Modify your Nginx config for the server&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;##&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# You should look at the following URL's in order to grasp a solid understanding&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# of Nginx configuration files in order to fully unleash the power of Nginx.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# http://wiki.nginx.org/Pitfalls&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# http://wiki.nginx.org/QuickStart&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# http://wiki.nginx.org/Configuration&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Generally, you will want to move this file somewhere, and start with a clean&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# file but keep this around for reference. Or just disable in sites-enabled.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Default server configuration&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  listen 80 default_server;
  listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:80 default_server;

  root /var/www/html;

  &lt;span class=&quot;c&quot;&gt;# Add index.php to the list if you are using PHP&lt;/span&gt;
  index index.php index.html index.htm index.nginx-debian.html;

  server_name fqdn.ofyourserver.com;

  location /munkireport &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    try_files &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;/ &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;404;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  location ~ &lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;php&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    fastcgi_pass unix:/run/php/php7.1-fpm.sock;
    include snippets/fastcgi-php.conf;
    fastcgi_param SCRIPT_FILENAME &lt;span class=&quot;nv&quot;&gt;$document_root$fastcgi_script_name&lt;/span&gt;;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  location ~ /&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;ht &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    deny all;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Create a symlink from &lt;code class=&quot;highlighter-rouge&quot;&gt;/media/munkireport/public&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html/munkireport&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -s /media/munkireport/public /var/www/html/munkireport
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Modify your munkireport &lt;code class=&quot;highlighter-rouge&quot;&gt;config.php&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'connection'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
 &lt;span class=&quot;s1&quot;&gt;'driver'&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;s1&quot;&gt;'mysql'&lt;/span&gt;,
 &lt;span class=&quot;s1&quot;&gt;'host'&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;s1&quot;&gt;'127.0.0.1'&lt;/span&gt;,
 &lt;span class=&quot;s1&quot;&gt;'port'&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; 3306,
 &lt;span class=&quot;s1&quot;&gt;'database'&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;s1&quot;&gt;'dbname'&lt;/span&gt;,
 &lt;span class=&quot;s1&quot;&gt;'username'&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;s1&quot;&gt;'username'&lt;/span&gt;,
 &lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt;,
 &lt;span class=&quot;s1&quot;&gt;'options'&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;PDO::MYSQL_ATTR_INIT_COMMAND &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;s1&quot;&gt;'SET NAMES utf8'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;
&lt;span class=&quot;nv&quot;&gt;$conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'subdirectory'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; substr&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'PHP_SELF'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
            0,
            strpos&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'PHP_SELF'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, basename&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FC&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Restart your server or your services.&lt;/p&gt;

</description>
        <pubDate>Wed, 14 Feb 2018 08:22:00 -0700</pubDate>
        <link>https://wardsparadox.github.io/2018/02/14/setting-up-munkireport-php-on-ubuntu-16-with-nginx/</link>
        <guid isPermaLink="true">https://wardsparadox.github.io/2018/02/14/setting-up-munkireport-php-on-ubuntu-16-with-nginx/</guid>
        
        
      </item>
    
      <item>
        <title>Faster Munki Downloads from Nginx</title>
        <description>&lt;p&gt;Through multiple issues over the last month or so, I decided to completely rebuild my Munki server. This server is semi-critical in our district as all configurations are now sent out via Munki. As I was waiting for Ubuntu 16 to install and do some base configurations, I started looking for some guides on how to increase performance. I stumbled across &lt;a href=&quot;http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity&quot;&gt;worker_cpu_affinity&lt;/a&gt;.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;This can be a bit dangerous to mess with, and shouldn‚Äôt have to be messed with, at least from a couple topics on it. I‚Äôm not sure if Nginx was being correctly assigned, but I decided to try and associate the worker processes with specific cores. My Nginx config (&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/nginx.conf&lt;/code&gt;) has these two lines in the outermost section of the config file. Since making this change, both Munki and MunkiReport have had huge increases in performance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JSON&quot;&gt;worker_processes    4;
worker_cpu_affinity 0001 0010 0100 1000;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this performance increase, I have seen our Munki client timeout‚Äôs drop to single digit percentages of what we had before. I‚Äôve also seen just how fast things download. For example, the MS Office 2016 Pkg installer is approx 2 GB in size. When doing a few machines out at a couple of schools, this would normally take 5-10 minutes to download a piece. I have now seen that download take under 2 minutes for all machines. I‚Äôm glad this was able to help us, and maybe it will help you.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Jan 2018 09:22:00 -0700</pubDate>
        <link>https://wardsparadox.github.io/2018/01/29/faster-munki-downloads-from-nginx/</link>
        <guid isPermaLink="true">https://wardsparadox.github.io/2018/01/29/faster-munki-downloads-from-nginx/</guid>
        
        <category>munki</category>
        
        <category>nginx</category>
        
        <category>webserver</category>
        
        
      </item>
    
      <item>
        <title>Deploying DetectX Swift with Munki</title>
        <description>&lt;p&gt;DetectX Swift is an alternative to MalwareBytes Anti-Malware and was more economical for our district to use. It also is faster and more what we were looking for. I highly recommend it! This is a write up based on how we are deploying it here.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h3 id=&quot;first-things-first-if-you-are-reading-this-you-will-need-a-management-license-from-sqwarq-for-detectx-swift-cost-is-299-usd-once-you-have-this-make-note-of-the-information-in-the-email-with-the-account-information&quot;&gt;&lt;strong&gt;First things first, if you are reading this, you will need a Management License from Sqwarq for DetectX Swift; Cost is $299 USD. Once you have this, make note of the information in the email with the account information.&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;We decided to deploy it to &lt;code class=&quot;highlighter-rouge&quot;&gt;/Applications/Utilities&lt;/code&gt;. This makes it still easy to access but out of the standard users view. We deploy it via Munki as well. You will also need to add a &lt;code class=&quot;highlighter-rouge&quot;&gt;post-install&lt;/code&gt; script to register the client. Thankfully DetectX Swift allows for re-registering with no issue, so you can ‚Äúregister‚Äù it after every installation. Here is the &lt;code class=&quot;highlighter-rouge&quot;&gt;pkginfo&lt;/code&gt; dict for the &lt;a href=&quot;https://github.com/autopkg/autopkg&quot;&gt;autopkg&lt;/a&gt; recipe:&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;pkginfo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;catalogs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;testing&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;description&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;DetectX Swift is a shareware security and troubleshooting tool that uses a combination of hardcoded search definitions along with live updates and predictive heuristics to detect both known and unknown threats and issues. It provides the user with multiple analytical capabilities regarding both the system‚Äôs current state and changes to its state over time related to its ongoing security and performance.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;category&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Utlities&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;developer&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Philip Stokes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;display_name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;DetectX Swift&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;%NAME%&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;unattended_install&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;items_to_copy&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;destination_path&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/Applications/Utilities&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;source_item&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;DetectX Swift.app&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;minimum_os_version&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;10.11&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;postinstall_script&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;#!/bin/bash
&quot;/Applications/Utilities/DetectX Swift.app/Contents/MacOS/DetectX Swift&quot; register -key &quot;KEYNUMBER&quot; -email &quot;REGISTEREDEMAIL&quot;

&quot;/Applications/Utilities/DetectX Swift.app/Contents/MacOS/DetectX Swift&quot; search -aj &quot;/usr/local/munki/preflight.d/cache/detectx.json&quot;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you are using MunkiReport-PHP, there is a module I created in the current WIP branch. WIP is not stable for production, but should be entering beta soon. In order to use the module you will need to create a launchDaemon targeting DetectX Swift‚Äôs CLI tool to output a JSON file. There is an example in the module READMD file.
&lt;img src=&quot;/images/2018/01/detectXWidget.png&quot; alt=&quot;detectXWidget&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I am deploying a boot-every script with &lt;a href=&quot;https://github.com/chilcote/outset&quot;&gt;Outset&lt;/a&gt; that does the same thing. I packaged this up as an &lt;code class=&quot;highlighter-rouge&quot;&gt;update_for&lt;/code&gt; in Munki. This will provide a dashboard that will give you in-depth look at the current status of your fleet. The client tab will show you exactly what each client shows for each infection. The command structure for this is as follows:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;/Applications/Utilities/DetectX Swift.app/Contents/MacOS/DetectX Swift&quot;&lt;/span&gt; search -aj &lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/munki/preflight.d/cache/detectx.json&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This will scan (if you are running it independently you must run it as root!) all users homes and report on it‚Äôs findings. It is fairly quick. If you combine all of this together you get an auto-updating anti-malware solution that reports to a dashboard for every machine you deploy it too. If there are machines supsected of having malware, we call the employee and request they do a quick restart so that the &lt;code class=&quot;highlighter-rouge&quot;&gt;boot-every&lt;/code&gt; script has a chance to report, then perform a Munki update check to send the data to us. So far this has proven effective and useful here.&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Jan 2018 10:25:00 -0700</pubDate>
        <link>https://wardsparadox.github.io/2018/01/15/deploying-detectx-swift-with-munki/</link>
        <guid isPermaLink="true">https://wardsparadox.github.io/2018/01/15/deploying-detectx-swift-with-munki/</guid>
        
        <category>munki</category>
        
        
      </item>
    
      <item>
        <title>Dock-maintainer: Defined</title>
        <description>&lt;p&gt;Recently I created a tool called dock-maintainer. This post goes over a couple things but mainly serves to explain why I created it and why I needed it instead of using other solutions. Traditionally this job (maintaining Dock configurations) has been handled in a multitude of ways. There have been many ways to do this. One can use configuration profiles, puppet/salt/chef/etc, &lt;code class=&quot;highlighter-rouge&quot;&gt;outset&lt;/code&gt; with a script (a method I used until recently).
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;I found a few problems with the previous methods. With configuration profiles, I could not find a reliable way to deploy a Dock payload for a specified user. If you installed it via &lt;a href=&quot;https://www.munki.org/&quot;&gt;munki&lt;/a&gt;, this forced it for all users. I forked and changed Nick McSpadden‚Äôs tool, &lt;a href=&quot;https://github.com/nmcspadden/outsetDockProfiler&quot;&gt;Outset Dock Profiler&lt;/a&gt;. This packaged the profile and created a script to load it via &lt;code class=&quot;highlighter-rouge&quot;&gt;outset&lt;/code&gt; at login. The rewrite allowed for multiple profiles to be loaded via &lt;code class=&quot;highlighter-rouge&quot;&gt;outset&lt;/code&gt; per user. This created another issue; upon login due to parental controls being loaded, it would prompt for a password to allow managed preferences changes. There was also issues that it created a singular install script that could affect other things in edge cases. This was purely due to my fork and the script part not being correctly modified to handle multiple profiles.&lt;/p&gt;

&lt;p&gt;I have never used puppet, chef or anything like them, so that method was out due to lack of experience and time to learn it. From what had been explained and what I had found online out of the box didn‚Äôt allow the dock customization per user that I needed either. I eventually settled on using &lt;a href=&quot;https://github.com/chilcote/outset&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;outset&lt;/code&gt;&lt;/a&gt; to deploy an initial Dock setup script using &lt;code class=&quot;highlighter-rouge&quot;&gt;[dockutil](https://github.com/kcrawford/dockutil)&lt;/code&gt;. This included a shortcut in the Dock to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/Applications&lt;/code&gt; folder for ease of use. I thought that this may be enough for most needs.&lt;/p&gt;

&lt;p&gt;Due to our district using parental controls (soon to be changing, more on that soon), Chrome V58 stopped working with accounts using parental controls again. It would not launch correctly, if at all. I had many teachers come to me asking if I could add Firefox to the Docks on the student labs. I informed them to use Spotlight or the Applications folder shortcut already on the Dock. They stated it was difficult for the K-3 students to use those two and that it would really help to have it on the Dock. I lock the dock (our students being notorious for removing icons) using several managed preferences I found during my research into using Configuration profiles. This made it difficult for staff to add icons to dock without knowing how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;dockutil&lt;/code&gt; via terminal. What is nice is that the managed preferences don‚Äôt prevent &lt;code class=&quot;highlighter-rouge&quot;&gt;dockutil&lt;/code&gt; from editing the &lt;code class=&quot;highlighter-rouge&quot;&gt;plist&lt;/code&gt; as needed.&lt;/p&gt;

&lt;p&gt;As I had already deployed &lt;code class=&quot;highlighter-rouge&quot;&gt;dockutil&lt;/code&gt; to all the machines district wide, I knew that I needed to find a solution that to wrap &lt;code class=&quot;highlighter-rouge&quot;&gt;dockutil&lt;/code&gt; and make it easier to setup and adjust docks without having to run a script on each machine for each change using ARD. This made me consider writing a tool to do this for me. I saw &lt;a href=&quot;https://github.com/ygini/DockServiceManager&quot;&gt;ygini&lt;/a&gt; had created a wrapper for MDMs and &lt;code class=&quot;highlighter-rouge&quot;&gt;dockutil&lt;/code&gt; but that wasn‚Äôt in the same way I wanted. I settled and wrote dock-maintainer which allowed me to specify an account whose dock I wanted to modify, and host the files on a simple web server. It uses &lt;code class=&quot;highlighter-rouge&quot;&gt;outset&lt;/code&gt; to handle the updater and script to maintain the dock, and uses &lt;code class=&quot;highlighter-rouge&quot;&gt;dockutil&lt;/code&gt; to modify the dock itself. It also auto downloads the file based on the ‚ÄúLast Modified‚Äù header (huge tip from @elios on the &lt;a href=&quot;http://macadmins.org&quot;&gt;macadmins&lt;/a&gt; slack for recommending this!), so only if it needs to by storing those dates in extended attributes of the file. If it detects any changes, it clears the entire dock to ensure a clean run of adding all the items back in. It also exits cleanly if it detects no changes and doesn‚Äôt mess the dock.&lt;/p&gt;

&lt;p&gt;To take advantage of this tool, you will need to have a web server, a text editor, and have the short name of the account you wish to manage handy. I would recommend using a &lt;code class=&quot;highlighter-rouge&quot;&gt;munki&lt;/code&gt; repo if you already have one as it is setup in the same fashion. I created a folder in my &lt;code class=&quot;highlighter-rouge&quot;&gt;munki&lt;/code&gt; repo called &lt;code class=&quot;highlighter-rouge&quot;&gt;docksetups&lt;/code&gt;. In this I created a &lt;code class=&quot;highlighter-rouge&quot;&gt;plist&lt;/code&gt; for every user that I wish to manage (remember it‚Äôs the short name that is returned not the users full name), with no file extension. In each &lt;code class=&quot;highlighter-rouge&quot;&gt;plist&lt;/code&gt; there must be two arrays, one called Apps and one called Others. In each array use string elements with the full path to the item you want in the dock. In the Others array you can use ~ to reference items in the HOME directory of that user. You will then need to set the preferences up on the machines you wish to manage. The domain is &lt;code class=&quot;highlighter-rouge&quot;&gt;com.github.wardsparadox.dock-maintainer&lt;/code&gt;. There are two keys, &lt;code class=&quot;highlighter-rouge&quot;&gt;ManagedUser&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ServerURL&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;ManagedUser&lt;/code&gt; key must be the same as the name of &lt;code class=&quot;highlighter-rouge&quot;&gt;plist&lt;/code&gt; and the the short name as the user you wish to manage. The server URL key is the path to the server folder you setup i.e.: &lt;code class=&quot;highlighter-rouge&quot;&gt;http://munki.example.com/munki_repo/docksetups&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I plan to add more logging features in the future. I hope this article makes the creation of yet another tool more understood.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 May 2017 16:00:00 -0600</pubDate>
        <link>https://wardsparadox.github.io/2017/05/29/dock-maintainer-defined/</link>
        <guid isPermaLink="true">https://wardsparadox.github.io/2017/05/29/dock-maintainer-defined/</guid>
        
        <category>dock-maintainer</category>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>Hello-IT Setup and Deployment</title>
        <description>&lt;p&gt;I have recently been playing with a tool called &lt;a href=&quot;https://github.com/ygini/Hello-IT&quot;&gt;Hello IT&lt;/a&gt;. It has been a wonderful tool in testing and I am getting excited to send it out here in our district. I believe it will help our staff be able to communicate to us effectively. Our current layout looks like this:
&lt;img src=&quot;/images/2017/05/HelloIT Menu Layout.jpg&quot; alt=&quot;helloIT Menu Layout&quot; /&gt;
&lt;!--more--&gt;
To do this was pretty easy once I got a good explanation from &lt;a href=&quot;https://github.com/ygini&quot;&gt;@ygini&lt;/a&gt; on the &lt;i class=&quot;fa fa-apple fg-lg&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://macadmins.org&quot;&gt;MacAdmins.org&lt;/a&gt; slack. He pointed out many flaws with my understanding. Take for example script items. You can choose &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; as the way to call the script. It‚Äôs &lt;em&gt;much&lt;/em&gt; easier to use the script method. Drop your script in the &lt;code class=&quot;highlighter-rouge&quot;&gt;CustomScript&lt;/code&gt; directory, check it‚Äôs permissions and call it the script like this:&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;functionIdentifier&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;public.script.item&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;settings&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;script&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.github.ygini.hello-it.wardsparadox.serialnumber.sh&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;title&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;SNInfo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let‚Äôs break the preferences down a bit. Each &lt;code class=&quot;highlighter-rouge&quot;&gt;item&lt;/code&gt; is stored inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;dict&lt;/code&gt;. There is a &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; called &lt;code class=&quot;highlighter-rouge&quot;&gt;functionIdentifier&lt;/code&gt; that tells HITp which type of item it is. You can create custom items but I have not had a need for that. There are &lt;code class=&quot;highlighter-rouge&quot;&gt;[public.open.application, public.open.resource, public.quit, public.script.item, public.separator, public.submenu, public.test.http, public.title]&lt;/code&gt; available as &lt;code class=&quot;highlighter-rouge&quot;&gt;functionIdentifier&lt;/code&gt;‚Äôs. You can find all of the explanations for each of these on the &lt;a href=&quot;https://github.com/ygini/Hello-IT/wiki/&quot;&gt;Wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To build a deployment package, I recommend &lt;a href=&quot;https://www.github.com/munki/munki-pkg&quot;&gt;munki-pkg&lt;/a&gt; as it is simple, it wraps native frameworks and is incredibly quick to get going. First create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;munkipkg&lt;/code&gt; project:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$:&lt;/span&gt; munkipkg --create hello-it-deployment
&lt;span class=&quot;nv&quot;&gt;$:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ./hello-it-deployment
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;At this point you will notice a folder structure like such:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
‚îú‚îÄ‚îÄ build
‚îú‚îÄ‚îÄ build-info.plist
‚îú‚îÄ‚îÄ payload
‚îî‚îÄ‚îÄ scripts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Edit the &lt;code class=&quot;highlighter-rouge&quot;&gt;build-info.plist&lt;/code&gt; and change several things to match the appropriate settings down below.&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;plist&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;version=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;distribution_style&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;false/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;identifier&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.github.yourusername.hello-it-deployment&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;install_location&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/Library/Application Support/CustomScripts&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;hello-it-deployment-${version}.pkg&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ownership&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;recommended&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;postinstall_action&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;none&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;suppress_bundle_relocation&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;version&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;1.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Once all the scripts you want to deploy are in the payload folder, you will need to change the permissions and ownership so they run correctly. To do this run (assuming you are still in the same directory inside your terminal session):&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$:&lt;/span&gt; sudo chown -R root:wheel payload
&lt;span class=&quot;nv&quot;&gt;$:&lt;/span&gt; sudo chmod -R 755 payload
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Your package is now ready to be built. Go over all the files again, make sure your &lt;code class=&quot;highlighter-rouge&quot;&gt;build-info.plist&lt;/code&gt; is correct, and build your package.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$:&lt;/span&gt; munkipkg build /path/to/hello-it-deployment
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This will create a package in the &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; directory of your project. You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;munkiimport&lt;/code&gt; or any other deployment tool to deploy this package now. If using &lt;a href=&quot;https://www.munki.org/&quot;&gt;munki&lt;/a&gt;, make sure to mark this as an &lt;code class=&quot;highlighter-rouge&quot;&gt;update_for&lt;/code&gt; for the Hello IT App. I recommend deploying the app and using the ‚ÄúKeepAlive‚Äù feature mentioned in the &lt;a href=&quot;https://github.com/ygini/Hello-IT/wiki/Launching-App&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will also need to deploy the preferences for your setup. I highly recommend using a configuration profile to do this. It makes management incredibly easy to maintain and update. I have tried to document the &lt;code class=&quot;highlighter-rouge&quot;&gt;dict&lt;/code&gt;‚Äôs needed for the scripts in the Repo, but if you have custom scripts, all I can do is recommend checking my example configuration profile in the main repo &lt;a href=&quot;https://github.com/ygini/Hello-IT/blob/master/example/HelloITConfiguration_example.mobileconfig&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;sidenote&quot;&gt;Sidenote:&lt;/h3&gt;
&lt;p&gt;If you have custom scripts that can be generalized, please make a fork of the main repo, adjust your scripts to be in reverse domain format such as &lt;code class=&quot;highlighter-rouge&quot;&gt;com.github.yourusername.hello-it.scriptname.sh&lt;/code&gt;, add a ReadMe.md following the templates in the repo and move them to a folder with the same script name. We can add so much to Hello IT and make it better with more community scripts.&lt;/p&gt;
</description>
        <pubDate>Fri, 12 May 2017 08:17:00 -0600</pubDate>
        <link>https://wardsparadox.github.io/2017/05/12/hello-it-setup-and-deployment/</link>
        <guid isPermaLink="true">https://wardsparadox.github.io/2017/05/12/hello-it-setup-and-deployment/</guid>
        
        <category>Hello IT</category>
        
        
      </item>
    
      <item>
        <title>I made a thing..well sorta</title>
        <description>&lt;p&gt;It seems that I have learned &lt;em&gt;A LOT&lt;/em&gt; in recent months concerning Python. Again huge shout out to &lt;a href=&quot;https://github.com/nmcspadden/&quot;&gt;Nick McSpadden&lt;/a&gt; and &lt;a href=&quot;https://github.com/pudquick/&quot;&gt;froger&lt;/a&gt; for helping me get to where I am knowledge wise today. In between now and my last post, Nick helped me understand the &lt;code class=&quot;highlighter-rouge&quot;&gt;dict&lt;/code&gt; datatype. Turns out python can use translate &lt;code class=&quot;highlighter-rouge&quot;&gt;dict&lt;/code&gt; into the plist equivalents! The more you know eh?&lt;/p&gt;

&lt;p&gt;The reason he was helping me on this was because I had an idea to take his &lt;a href=&quot;https://github.com/nmcspadden/PrinterGenerator&quot;&gt;PrinterGenerator&lt;/a&gt; tool and make it work in a different way. The input was roughly the same but the output was instead a printer profile that could be used outside of Munki or with Munki (v2.2 added the ability to install profiles). I had just taken some of the code and translated it to work with a template plist. Instead with his help, I was able to replace a lot of the code and change it into a more efficient tool for plists aka profiles.&lt;/p&gt;

&lt;p&gt;I have since added the ability to open the ppd‚Äôs (which most are just gzip-ed &lt;code class=&quot;highlighter-rouge&quot;&gt;ppd&lt;/code&gt; text files) and extract the model ‚ÄúNickName‚Äù, which Apple uses to determine the exact type of the machine. The code is on GitHub of course. I encourage you to look at it and suggest any fixes and features.
Link: &lt;a href=&quot;https://www.github.com/WardsParadox/PrinterProfileGenerator&quot;&gt;PrinterProfileGenerator&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Nov 2016 17:43:56 -0700</pubDate>
        <link>https://wardsparadox.github.io/2016/11/29/i-made-a-thingwell-sorta/</link>
        <guid isPermaLink="true">https://wardsparadox.github.io/2016/11/29/i-made-a-thingwell-sorta/</guid>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>TIL 03 -- Get Model Info via Python via Serial</title>
        <description>&lt;p&gt;A while back I learned about this website, &lt;a href=&quot;http://support-sp.apple.com/sp/product?cc=&quot;&gt;Apple Config Code Lookup&lt;/a&gt;, when I was building my first info grab script for an inventory. I have since evolved that script into a full Info Viewer (inventory is done via &lt;a href=&quot;https://github.com/munkireport/munkireport-php&quot;&gt;MunkiReport-PHP&lt;/a&gt;). One thing I was always missing was the output from the Apple Config Code Lookup; since I am migrating most of my shell scripts to Python, I figured I might as well add it. I am also learning to modularize my scripts whenever possible as well. This has made things really easy to combine scripts or call them from others. I also wanted to be able to call this script if fed a serial as well. Here we go.&lt;/p&gt;

&lt;p&gt;The old shell script I have is this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl -s http://support-sp.apple.com/sp/product?cc&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;system_profiler SPHardwareDataType | awk &lt;span class=&quot;s1&quot;&gt;'/Serial/ {print $4}'&lt;/span&gt; | cut -c 9-&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; | sed &lt;span class=&quot;s1&quot;&gt;'s|.*&amp;lt;configCode&amp;gt;\(.*\)&amp;lt;/configCode&amp;gt;.*|\1|'&lt;/span&gt; | tr &lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To me..that‚Äôs very ugly and very foreign as I am still learning &lt;code class=&quot;highlighter-rouge&quot;&gt;RegEx&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Jun 2016 12:49:00 -0600</pubDate>
        <link>https://wardsparadox.github.io/2016/06/27/til-03-get-model-info-via-python-via-serial/</link>
        <guid isPermaLink="true">https://wardsparadox.github.io/2016/06/27/til-03-get-model-info-via-python-via-serial/</guid>
        
        <category>TIL</category>
        
        <category>python</category>
        
        
      </item>
    
      <item>
        <title>TIL 02 - Multiple Inputs For One Argument</title>
        <description>&lt;p&gt;I use a tool called &lt;a href=&quot;https://github.com/nmcspadden/OutsetDockProfiler/&quot; target=&quot;_blank&quot; title=&quot;This script creates a package to use with Outset that will install a user-level profile for a specific user of your choice.&quot;&gt;Outset Dock Profiler&lt;/a&gt; made by &lt;a href=&quot;https://osxdominion.wordpress.com/&quot; target=&quot;_blank&quot;&gt;Nick McSpadden&lt;/a&gt;. It‚Äôs great and for user accounts where I only need to target one profile, it works great! &lt;i class=&quot;fa fa-thumbs-o-up fg-lg&quot;&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;There has always been one thing about it that bothered me. If I had multiple profiles for a user, I couldn‚Äôt use this tool. Sure I could use it to build an initial package and modify the script. I‚Äôve done it before but it can be easy for me (my brain is the size of a pea after all) to forget. I decided to learn about &lt;code class=&quot;highlighter-rouge&quot;&gt;argparse&lt;/code&gt; and add the ability to use multiple profiles. Now not only does it support multiple profiles but it will also organize the profiles into the appropriate folders by username. This means that regardless of the number of profiles you need, as separating out the payload makes management of them easier, it will ‚Äúinstall‚Äù them all as long as you have targeted the right user. Check it out on my github.
I am thinking about pull-requesting it back to Nick, but I‚Äôm sure there are other issues that I created. Let me know what you think.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wardsparadox/OutsetDockProfiler&quot; target=&quot;_blank&quot; title=&quot;My fork&quot;&gt;My fork of OutsetDockProfiler&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Jun 2016 15:43:30 -0600</pubDate>
        <link>https://wardsparadox.github.io/2016/06/05/multiple-inputs-with-one-argument/</link>
        <guid isPermaLink="true">https://wardsparadox.github.io/2016/06/05/multiple-inputs-with-one-argument/</guid>
        
        <category>TIL</category>
        
        <category>python</category>
        
        
      </item>
    
  </channel>
</rss>
